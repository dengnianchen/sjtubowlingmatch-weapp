<template>
	<view class="tab">
		
		<!-- defalut tab-label -->
		<scroll-view scroll-x="{{true}}"
		             class="tab__navbar"
		             scroll-left="{{(move-width*2.1) / 2}}"
		             scroll-with-animation="{{animate}}">
			<view class="tab__navbar-wrap">
				<view wx:for="{{tabs}}" wx:for-item="tab" wx:key="index"
					  class="tab__navbar-item {{index===activeKey?'tab__navbar-item--active':''}} {{index===tabs.length-1?'tab__navbar-item--last':''}}"
					  style="width:{{width}}rpx;"
					  bindtap="onSwitch" data-key="{{tab.key}}" data-idx="{{index}}">
					<label class="tab__navbar-title">{{tab.label}}</label>
				</view>
				
				<view class="tab__line {{!animate ? '' : 'tab__line--animate'}}"
				      style="left:{{move-2}}rpx;width:{{width+2}}rpx;">
					<view style="width:25%; background:#665EFF"></view>
					<view style="width:25%; background:#5773FF"></view>
					<view style="width:25%; background:#3497FD"></view>
					<view style="width:25%; background:#3ACCE1"></view>
				</view>
			
			</view>
		</scroll-view>
		
		<!-- tab-panel -->
		<view class="tab__content-wrap" style="border-top: 2rpx solid {{lineColor}};">
			<scroll-view scroll-y="{{true}}" class="tab__content">
				<slot></slot>
			</scroll-view>
		</view>
		<!--<view class="tab__content-wrap" style="border-top: 2rpx solid {{lineColor}}; {{fullScreen?'height: 100%;':''}}">
			<view class="tab__content" style="{{fullScreen?'height: 100%;':''}}">
				<slot></slot>
			</view>
		</view>-->
	
	</view>
</template>

<script>
	import Event from '@minui/wxc-tab/src/Event';
	
	export default {
		config: {
			usingComponents: {},
		},
		options: {
			multipleSlots: true, // support multi slot
		},
		behaviors: [],
		properties: {
			fullScreen: {
				type: Boolean,
				value: false,
			},
			tabIndex: {
				type: Number,
				value: 0,
				observer(val) {
					let activeKey = this.minAndMax(val);
					this.onSwitch(activeKey, 'all');
				}
			},
			componentId: {
				type: String,
				value: '',
			},
			animate: {
				type: Boolean,
				value: false,
			},
			textColor: {
				type: String,
				value: '#000',
			},
			activeTextColor: {
				type: String,
				value: '#ff5777',
			},
			lineColor: {
				type: String,
				value: '#ddd',
			},
			activeLineColor: {
				type: String,
				value: '#ff5777',
			},
		},
		data: {
			tabs: [],
			width: 0,
			activeKey: 0,
			move: 0,
		},
		attached() {
			this.componentId = this.data.componentId;
			this.tabs = [];
			Event.on(`tab-create-${this.componentId}`, tab => {
				this.type = !tab.label ? 'complex' : 'simple';
				this.tabs.push(tab);
			});
		},
		ready() {
			let activeKey = this.minAndMax(this.data.tabIndex);
			this.onSwitch(activeKey, 'all');
			this.listenSwitch();
			// const width = this.tabs.length < 5 ? (100 / this.tabs.length) : 25;
			let len = this.tabs.length;
			const width = parseInt(750 / (len > 5 ? 5 : len));
			this.type === 'complex' && Event.emit(`label-width-${this.componentId}`, width);
			this.setData({
				tabs: this.tabs,
				width,
				type: this.type,
				move: width * activeKey,
			});
		},
		detached() {
			Event.removeListener(`to-label-switch-${this.componentId}`);
			Event.removeListener(`to-panel-switch-${this.componentId}`);
			Event.removeListener(`from-label-switch-${this.componentId}`);
			Event.removeListener(`from-panel-switch-${this.componentId}`);
			Event.removeListener(`tab-create-${this.componentId}`);
			Event.removeListener(`label-width-switch-${this.componentId}`);
		},
		methods: {
			
			// limit input range
			minAndMax(activeKey) {
				const max = this.tabs.length - 1;
				const min = 0;
				if (activeKey > max) {
					return max;
				} else if (activeKey < min) {
					return 0;
				} else {
					return activeKey;
				}
			},
			
			// lisen child component tab event
			listenSwitch() {
				Event.on(`from-label-switch-${this.componentId}`, key => {
					this.onSwitch(key, 'to-panel');
				});
				Event.on(`from-panel-switch-${this.componentId}`, key => {
					this.onSwitch(key, 'to-label');
				});
			},
			
			onSwitch(activeKey, toNotice) {
				console.log ('onSwitch' + activeKey + toNotice);
				if (!toNotice) {
					activeKey = activeKey.currentTarget.dataset.idx;
					toNotice = 'to-panel';
				}
				const move = activeKey * this.data.width;
				this.setData({
					activeKey,
					move,
				});
				
				// to notice panel and label tab has switched
				if (toNotice === 'all') {
					Event.emit(`to-label-switch-${this.componentId}`, activeKey);
					Event.emit(`to-panel-switch-${this.componentId}`, activeKey);
				} else {
					Event.emit(`${toNotice}-switch-${this.componentId}`, activeKey);
				}
				
				this.afterSwitch(activeKey);
			},
			
			afterSwitch(activeKey) {
				this.triggerEvent('tabchange', {
					key: activeKey,
					componentId: this.componentId,
				});
			},
			
		},
	};
</script>

<style lang="less">
	@import "../../style.less";
	
	.tab {
		display: flex;
		flex-direction: column;
		align-items: stretch;
		height: 100%;
		background: white;
		
		&__navbar-wrap {
			position: relative;
		}
		&__navbar {
			white-space: nowrap;
			width: 100%;
			background: white;
			box-shadow: 0 4px 14px rgba(69,91,99,0.08);
			z-index: 10;
		}
		&__navbar-item {
			text-align: center;
			display: inline-block;
			overflow: hidden;
			white-space: nowrap;
			padding: 30px 0 0 0;
			color: @color__desc;
			font-size: @fontSize__desc;
			box-sizing: border-box;
			height: 74px;
			border-top: 3px solid @color__splitLine;
			border-right: 3px solid @color__splitLine;
			&--active {
				color: @color__text;
			}
			&--last {
				border-right: none;
			}
		}
		&__line {
			position: absolute;
			left: 0;
			bottom: 0;
			height: 12px;
			display: flex;
		}
		&__line {
			&--animate {
				transition: left .3s cubic-bezier(.645, .045, .355, 1);
			}
		}
		&__content-wrap {
			//width: 100%;
			display: flex;
			flex: 1;
			overflow: hidden;
		}
		&__content {
			overflow: hidden;
		}
	}
</style>
