<template>
	<view class="game-keyboard {{!showKeyboard?'game-keyboard--hide':''}}">
		<view class="game-keyboard__mask" bindtap="_onKeyboardMaskClicked"></view>
		<view class="game-keyboard__main">
			<view class="game-keyboard__head">{{head}}</view>
			<button wx:for="{{keys}}" wx:key="item"
			        class="game-keyboard__key {{keyboardSplitMode&&keyProperties[item].splitStyle?'game-keyboard__key--split':''}} {{keyProperties[item].style}}"
			        bindtap="_onGameKeyClicked"
			        data-key="{{item}}"
			        disabled="{{!keyProperties[item].enable}}">
				{{keyProperties[item].label}}
			</button>
		</view>
	</view>
</template>

<script>
	export default {
		config: {
			usingComponents: {
			}
		},
		behaviors: {
		
		},
		properties: {
			head: {
				type: String
			}
		},
		data: {
			keys: [
				'-', 'X', '/', 'H',
				'1', '2', '3', 'S',
				'4', '5', '6', 'C',
				'7', '8', '9', 'P',
			],
			keyProperties: {
				'X': { label: 'X', enable: true },
				'/': { label: '/', enable: true },
				'S': { label: '分屏', enable: true, style: 'game-keyboard__key--split' },
				'-': { label: '-', enable: true },
				'1': { label: '1', enable: true },
				'2': { label: '2', enable: true, splitStyle: true },
				'3': { label: '3', enable: true, splitStyle: true },
				'4': { label: '4', enable: true, splitStyle: true },
				'5': { label: '5', enable: true, splitStyle: true },
				'6': { label: '6', enable: true, splitStyle: true },
				'7': { label: '7', enable: true, splitStyle: true },
				'8': { label: '8', enable: true, splitStyle: true },
				'9': { label: '9', enable: true },
				'C': { label: '清除', enable: true },
				'P': { label: '上一格', enable: true },
				'H': { label: '隐藏', enable: true },
			},
			showKeyboard: false,
			keyboardSplitMode: false,
			frame: null
		},
		methods: {
			show(frame, isFirst) {
				this.frame = frame;
				if (!frame)
					this.hide();
				else {
					this.setData({ showKeyboard: true, isFirst });
					this._updateKeyboardStatus();
					this.triggerEvent('show');
				}
			},
			hide() {
				this.setData({ showKeyboard: false });
				this.triggerEvent('hide');
			},
			_onGameKeyClicked(e) {
				let key = e.target.dataset.key;
				
				if (key === 'H' || !this.frame) { // 隐藏键盘
					this.hide();
					return;
				}
				
				let frameContent = this.frame.data;
				
				switch (key) {
					case 'P':
						this.triggerEvent('switchprev');
						return; // 切换到下一格
					case 'C':
						frameContent = '';
						break; // 清除当前格
					default:
						frameContent = frameContent + key;
				}
				this.frame.update(frameContent);
				this.triggerEvent('changed', { frame: this.frame });
				if (this.frame.isComplete())
					this.triggerEvent('switchnext');
				else
					this._updateKeyboardStatus();
			},
			_onKeyboardMaskClicked() {
				this.hide();
			},
			_updateKeyStatus(acceptableKeys, keyboardSplitMode) {
				let keyProperties = this.data.keyProperties;
				for (let key of this.data.keys)
					this.data.keyProperties[key].enable = acceptableKeys.indexOf(key) >= 0;
				this.setData({ keyProperties, keyboardSplitMode });
			},
			_updateKeyboardStatus() {
				if (!this.frame) {
					this.hide();
					return;
				}
				let acceptable = this.frame.getAcceptable() + 'H';
				if (!this.data.isFirst)
					acceptable += 'P';
				if (this.frame.data.length !== 0)
					acceptable += 'C';
				this._updateKeyStatus(acceptable, this.frame.data.endsWith('S'));
			}
		}
	};
</script>

<style lang="less">
	
	.game-keyboard {
		position: fixed;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		z-index: 100;
	}
	
	.game-keyboard--hide {
		display: none;
	}
	
	.game-keyboard__mask {
		position: absolute;
		left: 0;
		top: 0;
		right: 0;
		bottom: 0;
		background: none;
	}
	
	.game-keyboard__main {
		position: absolute;
		bottom: 0;
		left: 0;
		right: 0;
		height: 500px;
		padding: 15px;
		display: grid;
		grid-template-columns: repeat(3, 1fr) 1.2fr;
		grid-template-rows: repeat(5, 1fr);
		grid-gap: 15px;
		background: white;
		box-shadow: 0 0 20px 10px rgba(136, 136, 136, 0.25);
	}
	
	.game-keyboard__head {
		display: flex;
		align-items: center;
		grid-column-start: 1;
		grid-column-end: 5;
		grid-row-start: 1;
		grid-row-end: 2;
		padding-left: 10px;
	}
	
	.game-keyboard__key {
		display: flex;
		align-items: center;
		justify-content: center;
		margin: 0;
		padding: 0;
		border-bottom: solid 4px #AAA;
	}
	
	.game-keyboard__key:not([disabled]) {
		border-bottom-color: #6ac2ff;
	}
	
	.game-keyboard__key.button-hover {
		border-bottom: none;
	}
	
	.game-keyboard__key--split:not([disabled]) {
		background: #fff5f5;
		border-bottom-color: #d9534f;
	}
	
	.game-keyboard__key--split.button-hover {
		background: #e6dada;
	}

</style>