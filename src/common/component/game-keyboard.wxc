<template>
	<view class="game-keyboard {{!showKeyboard?'-hide':''}}">
		<view class="__mask" bindtap="_onKeyboardMaskClicked"></view>
		<view class="__main -keyboard-{{side}} {{showKeyboard<2?'-hide':'-show'}}"
		      style="{{side==='bottom'?'height:'+size:'width:'+size}}"
		      bindtransitionend="_onAnimationEnd">
			<view class="__head">
				<view wx:if="{{side==='right'}}" class="__hide-button" bindtap="_onGameKeyClicked" data-key="H">
					<wui-icon name="fa fa-angle-right" color="#c2c2c2"></wui-icon>
				</view>
				{{head}}
			</view>
			<button wx:for="{{keys}}" wx:key="item"
			        class="__key {{keyboardSplitMode&&keyProperties[item].splitStyle?'-split':''}} {{keyProperties[item].style}}"
			        hover-class="-hover"
			        bindtap="_onGameKeyClicked"
			        data-key="{{item}}"
			        disabled="{{!keyProperties[item].enable}}">
				{{keyProperties[item].label}}
			</button>
		</view>
	</view>
</template>

<script>
	export default {
		config: {
			usingComponents: {
				'wui-icon': '@yapple/wui-icon'
			}
		},
		behaviors: {
		
		},
		properties: {
			head: {
				type: String
			},
			size: {
				type: String,
				value: "35vmax"
			},
			side: {
				type: String,
				value: "bottom",
				observer(val) {
					if (val === 'bottom')
						this.setData({
							keys: [
								'-', 'X', '/', 'H',
								'1', '2', '3', 'S',
								'4', '5', '6', 'C',
								'7', '8', '9', 'P'
							]
						});
					else
						this.setData({
							keys: [
								'-', 'X', '/',
								'1', '2', '3',
								'4', '5', '6',
								'7', '8', '9',
								'S', 'C', 'P'
							]
						});
				}
			}
		},
		data: {
			keys: [
				'-', 'X', '/', 'H',
				'1', '2', '3', 'S',
				'4', '5', '6', 'C',
				'7', '8', '9', 'P'
			],
			keyProperties: {
				'X': { label: 'X', enable: true },
				'/': { label: '/', enable: true },
				'S': { label: '分屏', enable: true, style: '-split' },
				'-': { label: '-', enable: true },
				'1': { label: '1', enable: true },
				'2': { label: '2', enable: true, splitStyle: true },
				'3': { label: '3', enable: true, splitStyle: true },
				'4': { label: '4', enable: true, splitStyle: true },
				'5': { label: '5', enable: true, splitStyle: true },
				'6': { label: '6', enable: true, splitStyle: true },
				'7': { label: '7', enable: true, splitStyle: true },
				'8': { label: '8', enable: true, splitStyle: true },
				'9': { label: '9', enable: true },
				'C': { label: '清除', enable: true },
				'P': { label: '上一格', enable: true },
				'H': { label: '隐藏', enable: true },
			},
			showKeyboard: 0,
			keyboardSplitMode: false,
			frame: null
		},
		methods: {
			show(frame, isFirst) {
				this.frame = frame;
				if (!frame)
					this.hide();
				else {
					this.setData({ showKeyboard: 2, isFirst });
					this._updateKeyboardStatus();
					this.triggerEvent('show');
				}
			},
			hide() {
				if (this.data.showKeyboard === 2)
					this.setData({ showKeyboard: 1 });
			},
			_onGameKeyClicked(e) {
				let key = e.currentTarget.dataset.key;
				
				if (key === 'H' || !this.frame) { // 隐藏键盘
					this.hide();
					return;
				}
				
				let frameContent = this.frame.data;
				
				switch (key) {
					case 'P':
						this.triggerEvent('switchprev');
						return; // 切换到下一格
					case 'C':
						frameContent = '';
						break; // 清除当前格
					default:
						frameContent = frameContent + key;
				}
				this.frame.update(frameContent);
				this.triggerEvent('changed', { frame: this.frame });
				if (this.frame.isComplete())
					this.triggerEvent('switchnext');
				else
					this._updateKeyboardStatus();
			},
			_onKeyboardMaskClicked() {
				this.hide();
			},
			_updateKeyStatus(acceptableKeys, keyboardSplitMode) {
				let keyProperties = this.data.keyProperties;
				for (let key of this.data.keys)
					this.data.keyProperties[key].enable = acceptableKeys.indexOf(key) >= 0;
				this.setData({ keyProperties, keyboardSplitMode });
			},
			_updateKeyboardStatus() {
				if (!this.frame) {
					this.hide();
					return;
				}
				let acceptable = this.frame.getAcceptable() + 'H';
				if (!this.data.isFirst)
					acceptable += 'P';
				if (this.frame.data.length !== 0)
					acceptable += 'C';
				this._updateKeyStatus(acceptable, this.frame.data.endsWith('S'));
			},
			_onAnimationEnd(e) {
				if (this.data.showKeyboard < 2) {
					this.setData({ showKeyboard: 0 });
					this.triggerEvent('hide');
				}
				/*if (e.detail.animationName.startsWith('slideout')) {
					this.setData({ showKeyboard: 0 });
					this.triggerEvent('hide');
					
				}*/
			}
		}
	};
</script>

<style lang="less">
	@import "../../style";
	
	.game-keyboard {
		position: fixed;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
		z-index: 100;
		
		.__mask {
			position: absolute;
			left: 0;
			top: 0;
			right: 0;
			bottom: 0;
			background: none;
		}
		
		.__main {
			position: absolute;
			padding: 15*@px;
			display: grid;
			grid-gap: 15*@px;
			background: white;
			box-shadow: 0 0 20*@px 10*@px rgba(136, 136, 136, 0.25);
			box-sizing: border-box;
			
			.__head {
				display: flex;
				align-items: center;
				//padding-left: 10*@px;
				
				.__hide-button {
					width: 3em;
					height: 100%;
					display: flex;
					align-items: center;
					justify-content: center;
				}
			}
			
			.__key {
				display: flex;
				align-items: center;
				justify-content: center;
				margin: 0;
				padding: 0;
				border-bottom: solid 4*@px #AAA;
			}
			
			.__key.-hover {
				border-bottom: none;
			}
			
			.__key:not([disabled]) {
				border-bottom-color: #6ac2ff;
			}
			
			.__key.-split:not([disabled]) {
				background: #fff5f5;
				border-bottom-color: #d9534f;
			}
			
			.__key.-split.-hover {
				background: #e6dada;
			}
			
		}
		
		.__main.-keyboard-bottom {
			left: 0;
			right: 0;
			bottom: 0;
			grid-template-columns: repeat(3, 1fr) 1.2fr;
			grid-template-rows: repeat(5, 1fr);

			.__head {
				grid-column-start: 1;
				grid-column-end: 5;
				grid-row-start: 1;
				grid-row-end: 2;
			}
		}
		
		.__main.-keyboard-right {
			top: 0;
			bottom: 0;
			right: 0;
			grid-template-columns: repeat(3, 1fr);
			grid-template-rows: repeat(6, 1fr);
			
			.__head {
				grid-column-start: 1;
				grid-column-end: 4;
				grid-row-start: 1;
				grid-row-end: 2;
			}
		}
		
		.__main.-keyboard-bottom.-show {
			animation-duration: 0.3s;
			animation-name: slidein-bottom;
			//transition: bottom 1s;
		}
		
		.__main.-keyboard-right.-show {
			animation-duration: 0.3s;
			animation-name: slidein-right;
			//transition: right 1s;
		}
		
		.__main.-keyboard-bottom.-hide {
			bottom: -100%;
			transition: bottom 0.7s;
		}
		
		.__main.-keyboard-right.-hide {
			right: -100%;
			transition: right 0.7s;
		}
	}
	
	.game-keyboard.-hide {
		display: none;
	}
	
	@keyframes slidein-bottom {
		from {
			bottom: -100%;
		}
		to {
			bottom: 0;
		}
	}
	
	@keyframes slidein-right {
		from {
			right: -100%;
		}
		to {
			right: 0;
		}
	}
	
	@keyframes slideout-bottom {
		from {
			bottom: 0;
		}
		to {
			bottom: -100%;
		}
	}
	
	@keyframes slideout-right {
		from {
			right: 0;
		}
		to {
			right: -100%;
		}
	}

</style>