<template>
	<view class="user-selector">
		<view class="user-selector__top">
			<view class="user-selector__search">
				<wxc-search showClear="{{true}}"
				            bg-color="transparent"
				            icon-color="#AAA"
				            ph-color="#AAA"
				            placeholder="查找用户"
				            bind:input="_onSearchInput"
				></wxc-search>
			</view>
			<wxc-button value="刷新" type="secondary" bindclick="_refresh" btn-style="width:150rpx;height:80rpx"></wxc-button>
		</view>
		<view class="user-selector__userlist">
			<scroll-view wx:if="{{users.length}}" class="user-selector__userlist__content" scroll-y="{{true}}">
				<wxc-list wx:for="{{users}}" wx:key="index" wx:for-item="user"
				          title="{{user.name}}"
				          arrow="{{false}}"
				          data-user="{{user}}"
				          bindclick="_onUserClicked"
				></wxc-list>
			</scroll-view>
			<view wx:else class="user-selector__userlist__empty">找不到符合条件的用户</view>
		</view>
	</view>
</template>

<script>
	
	import User from '../../models/User';
	
	const pinyin = require('../../vendor/pinyin/pinyinUtil');
	
	let allUsers = null;
	
	export default {
		config: {
			usingComponents: {
				'wxc-search': '@minui/wxc-search',
				'wxc-list': '@minui/wxc-list',
				'wxc-button': '@minui/wxc-button',
				'wui-content': '@yapple/wui-content',
				'wui-icon': '@yapple/wui-icon',
			},
		},
		data: {
			excludeName: null,
		},
		async onLoad(options) {
			if (options.title)
				wx.setNavigationBarTitle({ title: options.title });
			allUsers = await User.getAll();
			
			// 去掉排除项
			let excludeNameArr = options.excludeName === null || options.excludeName === undefined ? [] :
				typeof(options.excludeName) === 'string' ? [ options.excludeName ] : options.excludeName;
			for (let excludeName of excludeNameArr) {
				for (let i = 0; i < allUsers.length; ++i) {
					if (allUsers[i].name === excludeName) {
						allUsers.splice(i, 1);
						break;
					}
				}
			}
			for (let user of allUsers)
				user.pinyin = pinyin.getFirstLetter(user.name);
			allUsers.sort((a, b) => a.pinyin.localeCompare(b.pinyin));
			this.setData({ users: allUsers });
		},
		_refresh() {
			this.reloadPage();
		},
		_onSearchInput(e) {
			if (!allUsers)
				return;
			let value = e.detail.value;
			let users = [];
			for (let user of allUsers) {
				if (user.name.indexOf(value) >= 0 || user.pinyin.indexOf(value.toUpperCase()) >= 0)
					users.push(user);
			}
			this.setData({ users });
		},
		_onUserClicked(e) {
			Page.navigateReturn({
				data: e.target.dataset['user']
			});
		}
	};

</script>
<style lang="less">
	
	@import "../../style";
	
	.user-selector {
		position: fixed;
		left: 0;
		top: 0;
		right: 0;
		bottom: 0;
		display: flex;
		flex-direction: column;
	}
	
	.user-selector__top {
		display: flex;
		align-items: stretch;
	}
	
	.user-selector__search {
		flex-grow: 1;
		padding: 10px 5px;
		border-bottom: solid 1px @color__splitLine;
	}
	
	.user-selector__userlist {
		position: relative;
		flex-grow: 1;
	}
	
	.user-selector__userlist__content {
		position: absolute;
		left: 0;
		top: 0;
		right: 0;
		bottom: 0;
	}
	
	.user-selector__userlist__empty {
		text-align: center;
		padding: 20px;
		color: @subHeadingColor;
		font-size: @fontSize__subDesc;
	}
</style>