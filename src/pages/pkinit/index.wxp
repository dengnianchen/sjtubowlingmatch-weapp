<template>
	<view class="pkinit__hd">
		<view class="pkinit__hd__player">选手：{{play.players[play.player_ids[0]].user.name}}</view>
		<view>比赛类型：定级赛</view>
	</view>
	<wui-panel title="第一局：当前局分 {{play.rounds[0][0].score - play.rounds[0][0].bonus}}{{play.rounds[0][0].bonus===0?'':'(+'+play.rounds[0][0].bonus+')'}}">
		<app-game id="game-round0"
		          players="{{play.players}}"
		          games="{{play.rounds[0]}}"
		          bindframeselected="onFrameSelected"
		          data-round="0"
		></app-game>
	</wui-panel>
	
	<wui-panel title="第二局：当前局分 {{play.rounds[1][0].score - play.rounds[1][0].bonus}}{{play.rounds[1][0].bonus===0?'':'(+'+play.rounds[1][0].bonus+')'}}">
		<app-game id="game-round1"
		          players="{{play.players}}"
		          games="{{play.rounds[1]}}"
		          bindframeselected="onFrameSelected"
		          data-round="1"
		></app-game>
	</wui-panel>

	<wui-panel>
		<wui-field type="custom" label="裁判">
			<view class="pkinit__judge-picker" bindtap="onSelectJudgeClicked">
				<text wx:if="{{play.judge}}" class="pkinit__judge-picker__label">{{play.judge.name}}</text>
				<text wx:else class="pkinit__judge-picker__label" style="color:#999">请选择裁判</text>
				<wui-icon name="fa fa-angle-right" color="#c2c2c2"></wui-icon>
			</view>
		</wui-field>
	</wui-panel>
	<view class="cc">
		<wxc-button size="large" type="primary" bind:submit="onSubmitButtonClicked">提交</wxc-button>
	</view>
	<app-game-keyboard id="game-keyboard"
	                   head="选手：{{play.players[play.rounds[activeFrame.round][activeFrame.gameIndex].player_id].user.name}}（第{{activeFrame.round+1}}局第{{activeFrame.round+1}}格）"
	                   bindswitchnext="switchToNextFrame"
	                   bindswitchprev="switchToPrevFrame"
	                   bindchanged="onKeyboardInput"
	></app-game-keyboard>
	<app-user-selector id="user-selector" exclude-id="{{$.me.id}}" bindselect="onUserSelect"></app-user-selector>
</template>

<script>
	import PkPlay from '../../models/PkPlay';
	import Game from '../../models/Game';
	import Player from '../../models/Player';
	
	export default {
		auth: true,
		config: {
			navigationBarTitleText: 'PK赛 - 定级赛',
			usingComponents: {
				'wui-panel': '@yapple/wui-panel',
				'wui-field': '@yapple/wui-field',
				'wui-icon': '@yapple/wui-icon',
				'wxc-list': '@minui/wxc-list',
				'wxc-button': '@minui/wxc-button',
				'app-user-selector': '../../common/component/user-selector',
				'app-game': '../../common/component/game',
				'app-game-keyboard': '../../common/component/game-keyboard'
			},
		},
		data: {
			activeFrame: null,
		},
		
		async onLoad() {
			
			let play = wx.getStorageSync('playTemp');
			if (!play) {
				let player = await Player.getInMatch('pk', $.AppData.me);
				let bonus = $.AppData.me.gender === 2 ? PkPlay.bonus : 0;
				play = {
					player_ids: [ player.id ],
					players: {},
					rounds: [
						[ new Game({ bonus: bonus, player_id: player.id }) ],
						[ new Game({ bonus: bonus, player_id: player.id }) ]
					]
				};
				play.players[player.id] = player;
			} else {
				play = $(play).toRichObject({
					players: {
						'*': Player
					},
					rounds: Game
				});
			}
			this.updatePlay(play);
		},
		async onSelectJudgeClicked() {
			let judge = await Page.navigateToDialog({
				url: '../userselector/index',
				data: {
					title: '选择裁判',
					excludeId: $.AppData.me.id
				}
			});
			if (judge) {
				this.data.play.judge = judge;
				this.updatePlay(this.data.play);
			}
		},
		async onSubmitButtonClicked(e) {
			let games = Array.prototype.concat.apply([], this.data.play.rounds);
			if (!games.every(value => value.isComplete)) {
				$.Modal.showError('提交成绩失败', '球局尚未完成录入，请完成录入后重试');
				return;
			}
			if (!this.data.play.judge) {
				$.Modal.showError('提交成绩失败', '请选择裁判后重试');
				return;
			}
			$.Modal.showBusy('正在提交…');
			try {
				await PkPlay.play('init', games, this.data.play.judge);
				await $.Modal.show('提交成绩', '提交成功，请联系裁判确认比赛结果');
				wx.removeStorageSync('playTemp');
				wx.navigateBack();
			} catch (ex) {
				$.Modal.showError('提交成绩失败', ex);
			}
		},
		updatePlay(play) {
			this.setData({ play });
			wx.setStorageSync('playTemp', $(play).toPlainObject());
		},
		onFrameSelected(e) {
			let frameRef = e.detail.frameRef;
			frameRef.round = parseInt(e.target.id.substr('game-round'.length));
			this._switchToFrame(frameRef);
		},
		onKeyboardInput(e) {
			this.data.play.rounds[this.data.activeFrame.round][this.data.activeFrame.gameIndex].calcScore();
			this.updatePlay(this.data.play);
		},
		switchToPrevFrame() {
			let frameRef = this.data.activeFrame;
			if (frameRef) {
				frameRef.frameIndex--;
				if (frameRef.frameIndex < 0) {
					frameRef.frameIndex = 9;
					frameRef.gameIndex--;
				}
				if (frameRef.gameIndex < 0)
					frameRef.round--;
				if (frameRef.round < 0)
					frameRef = null;
				else
					frameRef.gameIndex = this.data.play.rounds[frameRef.round].length - 1;
			}
			this._switchToFrame(frameRef);
		},
		switchToNextFrame() {
			let frameRef = this.data.activeFrame;
			if (frameRef) {
				frameRef.frameIndex++;
				if (frameRef.frameIndex === 10) {
					frameRef.frameIndex = 0;
					frameRef.gameIndex++;
				}
				if (frameRef.gameIndex >= this.data.play.rounds[frameRef.round].length) {
					frameRef.gameIndex = 0;
					frameRef.round++;
				}
				if (frameRef.round >= this.data.play.rounds.length)
					frameRef = null;
			}
			this._switchToFrame(frameRef);
		},
		_switchToFrame(frameRef) {
			this.setData({ activeFrame: frameRef });
			for (let i = 0; i < this.data.play.rounds.length; ++i)
				this.selectComponent(`#game-round${i}`).selectFrame(
					(frameRef && frameRef.round === i) ? frameRef :null);
			this.selectComponent('#game-keyboard').show(this._getFrame(frameRef),
				frameRef && !frameRef.round && !frameRef.gameIndex && !frameRef.frameIndex);
		},
		_getFrame(fr) {
			return !fr ? null : this.data.play.rounds[fr.round][fr.gameIndex].frames[fr.frameIndex];
		}
	};
</script>

<style lang="less">
	@import "../../style";
	
	.pkinit__hd {
		display: flex;
		padding: 10px;
	}
	
	.pkinit__hd__player {
		flex-grow: 1;
	}
	
	.pkinit__judge-picker {
		flex-grow: 1;
		display: flex;
	}
	
	.pkinit__judge-picker__label {
		flex-grow: 1;
	}
	
	.game-keyboard {
		position: fixed;
		bottom: 0;
		left: 0;
		right: 0;
		height: 500px;
		padding: 15px;
		display: grid;
		grid-template-columns: repeat(3, 1fr) 1.2fr;
		grid-template-rows: repeat(5, 1fr);
		grid-gap: 15px;
		background: white;
		box-shadow: 0 0 20px 10px #88888888;
		z-index: 100;
	}
	
	.game-keyboard--hide {
		display: none;
	}
	
	.game-keyboard__mask {
		position: fixed;
		left: 0;
		top: 0;
		right: 0;
		bottom: 0;
		background: none;
	}
	
	.game-keyboard__head {
		display: flex;
		align-items: center;
		grid-column-start: 1;
		grid-column-end: 5;
		grid-row-start: 1;
		grid-row-end: 2;
		padding-left: 10px;
	}
	
	.game-keyboard__key {
		display: flex;
		align-items: center;
		justify-content: center;
		margin: 0;
		padding: 0;
		border-bottom: solid 4px #AAA;
	}
	
	.game-keyboard__key:not([disabled]) {
		border-bottom-color: #6ac2ff;
	}
	
	.game-keyboard__key.button-hover {
		border-bottom: none;
	}
	
	.game-keyboard__key--split:not([disabled]) {
		background: #fff5f5;
		border-bottom-color: #d9534f;
	}
	
	.game-keyboard__key--split.button-hover {
		background: #e6dada;
	}
	
</style>
