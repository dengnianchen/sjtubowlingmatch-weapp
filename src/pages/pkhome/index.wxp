<template>
	<view class="page__banner">
		<image class="page__banner__elem __avatar" src="{{$.me.wx_info.avatarUrl}}"></image>
		<text class="page__banner__elem __name">{{$.me.name}}</text>
		<app-pk-player-state class="page__banner__elem__last __status" player-state="{{player.detail}}"></app-pk-player-state>
	</view>
	<wxc-notice wx:if="{{playTodoByOther}}"
	            notice="你的上一场比赛尚未被其他选手确认，在被确认前无法开启新的比赛"
	            color="#ff5777" bgColor="#ffe8ee" scroll="{{true}}"></wxc-notice>
	<wxc-notice wx:if="{{playTodoByJudge}}"
	            notice="你的上一场比赛尚未被裁判确认，在被确认前无法开启新的比赛"
	            color="#ff5777" bgColor="#ffe8ee" scroll="{{true}}"></wxc-notice>
	<view class="pkhome__week">当前为本赛季第{{match.week+1}}周</view>
	<view class="cc pkhome__menu">
		<block wx:if="{{!player || !player.status}}">
			<text class="__item">你尚未加入本赛季PK赛。</text>
			<block wx:if="{{playerLastSeason&&match.week<2}}">
				<text class="__item">由于你参加过上一赛季的比赛，你可以选择</text>
				<wxc-button class="__item" size="large" type="primary" bind:submit="onInheritButtonClicked">继承上一赛季的段位</wxc-button>
				<text class="__item">或</text>
				<wxc-button class="__item" size="large" type="primary" plain="{{true}}" bind:submit="onPlayInitButtonClicked">重新进行定级赛</wxc-button>
			</block>
			<block wx:else>
				<text class="__item">要加入PK赛，你可以选择</text>
				<wxc-button class="__item" size="large" type="primary" bind:submit="onPlayInitButtonClicked">开始定级赛</wxc-button>
			</block>
		</block>
		<block wx:else>
			<wui-abnor class="__item" style="align-self: stretch" wx:if="{{player.status==='new'}}" error="定级赛尚未被确认"></wui-abnor>
			<wui-abnor class="__item" style="align-self: stretch" wx:elif="{{player.status==='quit'}}" error="你已退赛"></wui-abnor>
			<block wx:else>
				<wxc-button class="__item" size="large" type="{{player.detail_confirmed?'primary':'disabled'}}" bind:submit="onNormalPlayButtonClicked">常规赛</wxc-button>
				<wxc-button class="__item" size="large" type="{{player.detail_confirmed?'info':'disabled'}}" bind:submit="onFriendlyPlayButtonClicked">友谊赛</wxc-button>
			</block>
		</block>
	</view>
	<view class="pkhome__tabs">
		<wxc-tab default-index="{{0}}"
				 active-text-color="#108ee9"
				 active-line-color="#108ee9"
				 component-id="c1"
				 animate="{{true}}">
			<wxc-tab-panel tab-index="{{0}}" component-id="c1" label="段位表">
				<app-playerlist wx:for="{{players}}" wx:key="index" wx:for-item="player"
				                wx:if="{{player.status&&player.status!=='quit'}}"
				                index="{{index}}" player="{{player}}"></app-playerlist>
			</wxc-tab-panel>
			<wxc-tab-panel tab-index="{{1}}" component-id="c1" label="历史战绩">
				<app-playlist wx:for="{{plays}}" wx:key="index" wx:for-item="play" play="{{play}}"></app-playlist>
				<wui-abnor wx:if="{{!plays.length}}" error="暂无记录"></wui-abnor>
			</wxc-tab-panel>
		</wxc-tab>
	</view>
	
	<wui-dialog id="dialog-inherit-promote" title="继承段位" confirm-text="继承" cancel-text="再想想">
		<app-pk-player-state player-state="{{playerLastSeason.detail}}" rank-table="{{$.matches['pk'][1].detail.rank_table}}"></app-pk-player-state>
		<text>↓</text>
		<app-pk-player-state player-state="{{inheritCalc}}"></app-pk-player-state>
	</wui-dialog>
	<wui-dialog id="dialog-inherit-success" title="成功继承段位">
		当前段位：<app-pk-player-state player-state="{{inheritCalc}}"></app-pk-player-state>
	</wui-dialog>
</template>

<script>
	import PkPlay from '../../models/PkPlay';
	import Match from '../../models/Match';
	import Player from '../../models/Player';
	import Play from '../../models/Play';
	
	const pkrule = require('../../pkrules');
	
	export default {
		auth: true,
		config: {
			navigationBarTitleText: 'PK赛首页 - 加载中',
			enablePullDownRefresh: true,
			usingComponents: {
				'wxc-button': '@minui/wxc-button',
				'wxc-tab': '@minui/wxc-tab',
				'wxc-tab-panel': '@minui/wxc-tab/panel',
				'wxc-notice': '@minui/wxc-notice',
				'wui-dialog': '../../common/component/dialog',
				'wui-abnor': '@yapple/wui-abnor',
				'wui-icon': '@yapple/wui-icon',
				'app-pk-player-state': '../../common/component/pk-player-state',
				'app-playlist': '../../common/component/playlist',
				'app-playerlist': '../../common/component/playerlist'
			},
		},
		data: {
			match: null,
			player: null,
			playerLastSeason: null,
			rankTable: PkPlay.rankTable,
			pkrule: pkrule,
			showConfirmNotice: false
		},
		
		async onShow() {
			
			let playing = wx.getStorageSync('pk');
			if (playing) {
				await $.Modal.show('回到比赛',
					'您有尚未完成录入的比赛，必须完成录入后才能进行其他操作', {
						showCancel: false,
						confirmText: '继续录入'
					});
				Page.navigateTo({
					url: `/pages/pk${playing.type}/index`
				});
			}
			
			let match = $.AppData.matches.pk[0];
			if (!match || match.status !== 'active') {
				wx.setNavigationBarTitle({ title: 'PK赛关闭中' });
				throw $.Err.NO_RESOURCE('当前没有正在进行的赛季');
			}
			wx.setNavigationBarTitle({ title: match.name });
			
			let players = await PkPlay.getPlayers();
			
			let playerMe = null;
			for (let player of players)
				if (player.user_id === $.AppData.me.id)
					playerMe = player;
			
			let playerLastSeason = (playerMe && playerMe.status) ? null :
				await Player.getInMatch($.AppData.matches.pk[1], $.AppData.me);
			let plays = (playerMe && playerMe.status) ? await Play.getByPlayer(playerMe) : [];
			
			plays.reverse();
			let playTodo = null;
			let playTodoByOther = null;
			let playTodoByJudge = null;
			for (let play of plays) {
				switch (play.status) {
					case Play.S_FILLED:
						if (!play.participants[playerMe.id].accept)
							playTodo = play;
						else
							playTodoByOther = play;
						break;
					case Play.S_PLAYER_ACCEPTED:
						playTodoByJudge = play;
						break;
				}
			}
			
			players.sort((a, b) => {
				if (a.detail.rank < b.detail.rank)
					return 1;
				if (a.detail.rank > b.detail.rank)
					return -1;
				if (a.detail.stars < b.detail.stars)
					return 1;
				if (a.detail.stars > b.detail.stars)
					return -1;
				if (a.detail.coins < b.detail.coins)
					return 1;
				if (a.detail.coins > b.detail.coins)
					return -1;
				return 0;
			});
			
			this.setData({ match, players, player: playerMe, playerLastSeason,
				plays, playTodoByOther, playTodoByJudge });
			if (playTodo) {
				await $.Modal.show('确认比赛', '有一场比赛等待你的确认。', {
					confirmText: '去确认',
					showCancel: false
				});
				Page.navigateTo({
					url: '/pages/playresult/index',
					data: {
						id: playTodo.id
					}
				});
			}
		},
		
		async onInheritButtonClicked(e) {
			try {
				$.Modal.showBusy('正在加载');
				this.setData({ 'inheritCalc': await PkPlay.calcInherit() });
				$.Modal.hideToast();
				let r = await $.Wui.Dialog.show("#dialog-inherit-promote");
				if (!r)
					return;
				
				$.Modal.showBusy('正在处理');
				let player = await PkPlay.joinByInherit();
				this.setData({ player });
				$.Modal.hideToast();
				await $.Wui.Dialog.show("#dialog-inherit-success");
				this.reloadPage();
			} catch (ex) {
				$.Modal.showError('继承段位', ex);
			}
		},
		async onPlayInitButtonClicked(e) {
			let r = await $.Wui.Dialog.show({
				title: '开始定级赛',
				content: `今天是本赛季的第${this._getMatch().week + 1}周，将按${this._getMatch().week < 2 ? '赛季初' : '赛季中'}的规则计算初始段位`,
				confirmText: '开始',
				cancelText: '再想想'
			});
			if (!r)
				return;
			try {
				await PkPlay.joinNew();
				wx.navigateTo({ url: '../pkinit/index' });
			} catch (ex) {
				$.Modal.showError('开始定级赛', ex);
			}
		},
		async onNormalPlayButtonClicked(e) {
			if ($.AppData.matches['pk'][0].week < 2) {
				await $.Modal.show('开启常规赛', '常规赛将于赛季第3周起开放', {
					confirmText: '知道了',
					showCancel: false
				});
				return;
			}
			if (!this.data.player.detail_confirmed) {
				await $.Modal.show('开启常规赛', '前一场比赛尚未被确认，无法开启新赛', {
					confirmText: '知道了',
					showCancel: false
				});
				return;
			}
			let players = [];
			for (let player of this.data.players) {
				if (player.status === Player.S_NORMAL &&
					player.detail_confirmed &&
					player.id !== this.data.player.id &&
					Math.abs(this.data.player.detail['rank'] - player.detail['rank']) < 2)
					players.push(player);
			}
			let opponent = await Page.navigateToDialog({
				url: '../pkplayerselector/index',
				data: {
					title: '选择对手'
				},
				richData: { players }
			});
			if (!opponent)
				return;
			let r = await $.Wui.Dialog.show({
				title: '开始常规赛',
				content: `确认选择${opponent.user.name}作为对手？`,
				confirmText: '确认',
				cancelText: '取消'
			});
			if (!r) return;
			Page.navigateTo({
				url: '../pknormal/index',
				richData: { me: this.data.player, opponent }
			});
		},
		async onFriendlyPlayButtonClicked(e) {
			if ($.AppData.matches['pk'][0].week < 2) {
				await $.Modal.show('开启友谊赛', '常规赛将于赛季第3周起开放', {
					confirmText: '知道了',
					showCancel: false
				});
				return;
			}
			if (!this.data.player.detail_confirmed) {
				await $.Modal.show('开启友谊赛', '前一场比赛尚未被确认，无法开启新赛', {
					confirmText: '知道了',
					showCancel: false
				});
				return;
			}
			let players = [];
			for (let player of this.data.players) {
				if (player.status === Player.S_NORMAL &&
					player.detail_confirmed &&
					player.id !== this.data.player.id &&
					this.data.player.detail['rank'] !== player.detail['rank'])
					players.push(player);
			}
			let opponent = await Page.navigateToDialog({
				url: '../pkplayerselector/index',
				data: {
					title: '选择对手'
				},
				richData: { players }
			});
			if (!opponent)
				return;
			let r = await $.Wui.Dialog.show({
				title: '开始友谊赛',
				content: `确认选择${opponent.user.name}作为对手？`,
				confirmText: '确认',
				cancelText: '取消'
			});
			if (!r) return;
			Page.navigateTo({
				url: '../pkfriendly/index',
				richData: { me: this.data.player, opponent }
			});
		},
		_getMatch() {
			return $.AppData.matches.pk[0];
		}
	};
</script>

<style lang="less">
	@import "../../style";
	
	.page__banner .__avatar {
		width: 60px;
		height: 60px;
	}
	.page__banner .__name {
		flex-grow: 1;
	}
	.page__banner .__status {
		text-align: right;
	}
	.pkhome__week {
		font-size: @fontSize__desc;
		color: @color__desc;
		text-align: right;
		padding: 10px;
	}
	.pkhome__menu {
		padding: 20px;
	}
	.pkhome__menu .__item {
		margin-bottom: 20px;
	}
	.pkhome__tabs {
		background: white;
	}
	.pkhome__playerlist__desc {
		text-align: center;
		font-size: @fontSize__desc;
		color: @color__desc;
		padding: 20px;
	}
</style>
